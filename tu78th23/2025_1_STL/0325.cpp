//------------------------------------------------------------------------
// 2025.03.25 STL 화78											 (4주 1일)
//------------------------------------------------------------------------
// 강의 소개 / 객체와 메모리 영역 - 많은 수의 객체를 어느 메모리에 저장할까?
// 동적할당(real_time)과 스마트포인터 - RAII
// RAII - 자원의 생명 주기를 객체의 생명주기와 일치시키는 프로그래밍 기법
// OS가 구분한다. - 
// 1. STACK
// 2. DATA
// 3. free-store(HEAP)
// 
// 1, 2와 3의 구분 - compile time에 메모리 크기를 아는 경우/크기 변동이 없을때
// 1과 2의 구분 - 1의 한계(default 1M 바이트)를 초과하면 2를 사용한다.
//------------------------------------------------------------------------
// 컴파일 환경은 이렇게 맞춰주세요
// VS 버젼 - 17.3.0 이후
// Release / x64, C++ 언어 표준 - /std::C++latest, SDL검사 - 아니요 
//------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"


//--------
int main()
//--------
{
	// [문제] "0325.cpp"에 있는 소문자를 모두 대문자로 바꿔 "0325 대문자.cpp"에 저장하라
	std::ifstream in{ "0325.cpp" };
	if (not in)
		return 20250325;
	std::ofstream out{ "0325 대문자.cpp" };

	std::transform(std::istream_iterator<char>{in}, {},
		std::ostream_iterator<char>{std::cout}, [ ](char c) {return toupper(c);});

	save("0325.cpp");
}
